---
- name: Set final compute count
  set_fact:
    final_compute_count: >-
      {% set nodes_length = ocp_inventry.json.nodes | length %}
      {% if compute_count == -1 %}
        {{ nodes_length | int }}
      {% else %}
        {% set temp = compute_count + 4 %}
        {% if temp > nodes_length %}
          {{ nodes_length | int }}
        {% else %}
          {{ temp | int }}
        {% endif %}
      {% endif %}

- name: Show final compute count
  debug:
    msg: "Final compute count is {{ final_compute_count }}"

- name: get the EDPM nodes
  set_fact:
    edpm_nodes: "{{ ocp_inventry.json.nodes[4:final_compute_count|int] | map(attribute='name') | list }}"

- name: check ssh key exists
  stat:
    path: "{{ ssh_key_file }}.pub"
  register: ssh_key

- name: generate ssh if not exist
  command:
    ssh-keygen -t rsa -N "" -f {{ ssh_key_file }}
  when: not ssh_key.stat.exists

- name: Add EDPM nodes to dynamic inventory group
  add_host:
    name: "{{ item }}"
    groups: edpm_nodes_group
    ansible_user: root
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_ssh_pass: "{{ ssh_password }}"
  loop: "{{ edpm_nodes }}"

- name: initialize the ctlplane ip vars
  set_fact:
    edpm_node_list: []
    base_ip: "{{ ctlplane_start_ip.split('.')[0:3] | join('.') }}"
    last_octet_start_ip: "{{ ctlplane_start_ip.split('.')[3] | int }}"

- name: Generate IP and hostname for each node
  set_fact:
    edpm_node_list: "{{ edpm_node_list + [node_info] }}"
  vars:
    ip_offset: "{{ ansible_loop.index0 }}"
    assigned_ip: "{{ base_ip }}.{{ (last_octet_start_ip | int) + (ip_offset | int) }}"
    hostname: "compute-{{ ip_offset }}"
    node_info:
      hostname: "{{ hostname }}"
      ip_address: "{{ assigned_ip }}"
      fqdn: "{{ item }}"
  loop: "{{ edpm_nodes }}"
  loop_control:
    extended: true

- name: print the final edpm nodes list
  debug:
    msg: "EDPM node detail: {{ edpm_node_list }}"

- name: Configure cloud_admin user on EDPM nodes
  include_tasks: prep-edpm-nodes.yml
  vars:
    node: "{{ item }}"
  loop: "{{ edpm_node_list }}"

- name: clear know_host file
  shell: ssh-keygen -R {{ item }}
  loop: "{{ edpm_nodes }}"
  ignore_errors: yes

- name: Copy ssh key to each node
  shell: >
    sshpass -p "{{ ssh_password }}" ssh-copy-id
    -i {{ ssh_key_file }}.pub
    -o StrictHostKeyChecking=no
    -o UserKnownHostsFile=/dev/null
    {{ ssh_username }}@{{ item }}
  loop: "{{ edpm_nodes }}"

- name: read the private key
  slurp:
    src: "{{ ssh_key_file }}"
  register: ssh_priv_key_data

- name: load and setfact of ssh key content
  set_fact:
    ssh_private_key: "{{ ssh_priv_key_data.content }}"
    ssh_public_key: "{{ lookup('file', ssh_key_file + '.pub') | b64encode }}"

- name: Generate nova migration key
  command:
    ssh-keygen -t rsa -N "" -f {{ nova_migration_key }}
  args:
    creates: "{{ nova_migration_key }}"

- name: read the nova private key
  slurp:
    src: "{{ nova_migration_key }}"
  register: ssh_nova_priv_key_data

- name: load and setfact of nova migration key
  set_fact:
    nova_migration_private_key: "{{ ssh_nova_priv_key_data.content }}"
    nova_migration_public_key: "{{ lookup('file', nova_migration_key + '.pub') | b64encode }}"

- name: generate nodeset values
  template:
    src: edpm-nodeset-values.yml.j2
    dest: "{{ dt_path }}/examples/dt/perfscale/scalelab/edpm/nodeset/values.yaml"

- name: generate nodeset values with Ceph
  template:
    src: edpm-nodeset-values-ceph.yml.j2
    dest: "{{ dt_path }}/examples/dt/perfscale/scalelab/edpm/nodeset/values-ceph.yaml"
  when: ceph_backend | default(false) | bool

- name: Render kustomization.yaml for dataplane nodeset
  template:
    src: kustomization.yaml.j2
    dest: "{{ dt_path }}/examples/dt/perfscale/scalelab/edpm/nodeset/kustomization.yaml"

- name: node names
  debug:
    msg: "{{ edpm_nodes }}"
